
///////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль транспорта отправки сообщений telegram
//
///////////////////////////////////////////////////////////////////////////////////////////////

Перем ПараметрыАвторизации;	// хранит структуру авторизации
Перем ОписаниеПротокола;	// хранит структуру описания протокола

///////////////////////////////////////////////////////////////////////////////////////////////
// Стандартный интерфейс
///////////////////////////////////////////////////////////////////////////////////////////////

// Протокол
//	Метод возвращает описание используемого протокола
//
// Возвращаемое значение:
//	Структура - Описание протокола
//		{
//			Имя 			- Строка - Системное имя транспорта
//			Представление 	- Строка - пользовательское представление транспорта
//			Описание		- Строка - Строковое описание транспорта
//			Операторы		- Структура - Возможные операторы транспорта
//		}
//
Функция Протокол() Экспорт
	
	Если ОписаниеПротокола = Неопределено Тогда
		
		ОписаниеПротокола = Новый Структура("Имя, Представление, Описание, Операторы", "telegram", "telegram", "Отправка сообщений в каналы telegram", Неопределено);
		
	КонецЕсли;
	
	Возврат ОписаниеПротокола;
	
КонецФункции // Протокол()

// Инициализация
//	Инициализация параметров транспорта
//
// Параметры:
//  ПараметрыИнициализации - Структура - набор параметров инициализации
//
Процедура Инициализация(ПараметрыИнициализации) Экспорт
	
	Если ПараметрыИнициализации = Неопределено Тогда
		
		Сообщить(СтрШаблон("Для инициализации транспорта %1 необходимо передавать в параметрах: ", Протокол().Представление));
		Сообщить(" - Логин");
		
		ВызватьИсключение СтрШаблон("Инициализация транспорта %1 невыполнена", Протокол().Представление);
		
	КонецЕсли;
	
	ПараметрыАвторизации = Новый Структура("Токен", ПараметрыИнициализации.Логин);
	
КонецПроцедуры // Инициализация()

// ОтправитьСообщение
//	Метод отправки сообщения
//
// Параметры:
//	Адресат					- Строка	- Адресат сообщения
//	Сообщение				- Строка	- Текст отправляемого сообщения
//	ДополнительныеПараметры	- Структура	- Набор дополнительных параметров
//
Процедура ОтправитьСообщение(Адресат, Сообщение, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыАвторизации = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон("Для отправки сообщения необходимо выполнить инициализацию транспорта %1", Протокол().Представление);
		
	КонецЕсли;
	
	ТекстСообщения = СтрЗаменить(Сообщение, Символы.ПС, "%0A");
	ПараметрыСообщения = Новый Структура("chat_id, text", Адресат, ТекстСообщения);

	ОпределитьТипСообщения(ДополнительныеПараметры, ПараметрыСообщения);

	ОтветHTTP = ВызватьМетодTelegramAPI("sendMessage", ПараметрыСообщения);
	
	
КонецПроцедуры // ОтправитьСообщение()

///////////////////////////////////////////////////////////////////////////////////////////////
// Методы реализации
///////////////////////////////////////////////////////////////////////////////////////////////

Функция ВызватьМетодTelegramAPI(ИмяМетода, Параметры)
	
	СтрокаПараметров = "";
	Для Каждого Параметр Из Параметры Цикл
		
		Шаблон = "%1=%2&";
		СтрокаПараметров = СтрокаПараметров + СтрШаблон(Шаблон, Параметр.Ключ, Параметр.Значение);
		
	КонецЦикла;	
	
	ИмяСервера = "https://api.telegram.org";
	
	URL = "/bot"
	+ ПараметрыАвторизации.Токен
	+ "/" + ИмяМетода
	+ "?" + СтрокаПараметров;
	
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(URL);
	
		HTTP = Новый HTTPСоединение(ИмяСервера,Число(443),,,,5);
	
		ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
				
		КодСостоянияСоединения = 201;

			Пока КодСостоянияСоединения > 200 Цикл
				
				Прокси = СоздатьДинамическийПрокси();

				HTTPЗапрос = Новый HTTPЗапрос(URL);
				HTTP = Новый HTTPСоединение(ИмяСервера,Число(443),,,Прокси,3);
				Попытка
				ОтветHTTP = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
				КодСостоянияСоединения = ОтветHTTP.КодСостояния;
				Исключение
				Пауза(1);
				КонецПопытки;

			КонецЦикла;

	КонецПопытки;
	Возврат ОтветHTTP;
	
КонецФункции

Функция СоздатьДинамическийПрокси()

	ИмяСервера = "http://pubproxy.com";
	URL = "api/proxy?format=txt&type=http&https=true";
	
	HTTPЗапрос = Новый HTTPЗапрос(URL);
	HTTP = Новый HTTPСоединение(ИмяСервера);
	ОтветHTTP = HTTP.Получить(HTTPЗапрос);
	Ответ = ОтветHTTP.ПолучитьТелоКакСтроку();

	Массив = Новый Массив();
	Массив = СтрРазделить(Ответ, ":");
	ProxyIP = Массив[0];
	ProxyPort = Массив[1];

	Прокси = Новый ИнтернетПрокси(Ложь);
	Прокси.Установить("https",ProxyIP,ProxyPort, "", "", Ложь);

	Возврат Прокси;


КонецФункции
Процедура Пауза(Секунд) 
    
	ДатаВыхода = ТекущаяДата() + Секунд;
	Пока ТекущаяДата() < ДатаВыхода Цикл
			//Простите за костыль, но API требует не посылать запросы чаще чем раз в 1 секунду
	КонецЦикла;
    
КонецПроцедуры

Процедура ОпределитьТипСообщения(ДополнительныеПараметры, ПараметрыСообщения)
	Если ДополнительныеПараметры <> Неопределено 
		И
		ДополнительныеПараметры.Свойство("ТипСообщения") Тогда
		ТипСообщения = НРег(ДополнительныеПараметры.ТипСообщения);
		Если ТипСообщения = "html" Тогда
			ПараметрыСообщения.Вставить("parse_mode", "html");
		ИначеЕсли ТипСообщения = "markdown" или ТипСообщения = "md" Тогда
			ПараметрыСообщения.Вставить("parse_mode", "Markdown");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////

ПараметрыАвторизации = Неопределено;
